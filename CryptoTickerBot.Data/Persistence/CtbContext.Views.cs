//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(CryptoTickerBot.Data.Persistence.CtbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsd617f98ede78f1e56cca9827a601615c3b3b500e36a4192b613ad3f456d2cb98))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySetsd617f98ede78f1e56cca9827a601615c3b3b500e36a4192b613ad3f456d2cb98 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "d617f98ede78f1e56cca9827a601615c3b3b500e36a4192b613ad3f456d2cb98"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.CryptoCoin")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.CryptoCoinValue")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.CryptoExchange")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.DepositFees")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.WithdrawalFees")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.TeleSubscription")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.CryptoExchangeCryptoCoinValue")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.TeleSubscriptionCryptoCoin")
            {
                return GetView7();
            }

            if (extentName == "CtbContext.Coins")
            {
                return GetView8();
            }

            if (extentName == "CtbContext.CoinValues")
            {
                return GetView9();
            }

            if (extentName == "CtbContext.Exchanges")
            {
                return GetView10();
            }

            if (extentName == "CtbContext.DepositFees")
            {
                return GetView11();
            }

            if (extentName == "CtbContext.WithdrawalFees")
            {
                return GetView12();
            }

            if (extentName == "CtbContext.TeleSubscriptions")
            {
                return GetView13();
            }

            if (extentName == "CtbContext.CryptoExchange_LatestCoinValues")
            {
                return GetView14();
            }

            if (extentName == "CtbContext.TeleSubscription_Coins")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.TeleBotUser")
            {
                return GetView16();
            }

            if (extentName == "CtbContext.TeleBotUsers")
            {
                return GetView17();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CryptoCoin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CryptoCoin
        [CodeFirstDatabaseSchema.CryptoCoin](T1.CryptoCoin_Id, T1.CryptoCoin_Symbol, T1.CryptoCoin_Name)
    FROM (
        SELECT 
            CAST(T.Id AS [Edm.Int32]) AS CryptoCoin_Id, 
            T.Symbol AS CryptoCoin_Symbol, 
            T.Name AS CryptoCoin_Name, 
            True AS _from0
        FROM CtbContext.Coins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CryptoCoinValue.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CryptoCoinValue
        [CodeFirstDatabaseSchema.CryptoCoinValue](T1.CryptoCoinValue_Id, T1.CryptoCoinValue_CoinId, T1.CryptoCoinValue_ExchangeId, T1.CryptoCoinValue_LowestAsk, T1.CryptoCoinValue_HighestBid, T1.CryptoCoinValue_Time)
    FROM (
        SELECT 
            T.Id AS CryptoCoinValue_Id, 
            CAST(T.CoinId AS [Edm.Int32]) AS CryptoCoinValue_CoinId, 
            CAST(T.ExchangeId AS [Edm.Int32]) AS CryptoCoinValue_ExchangeId, 
            T.LowestAsk AS CryptoCoinValue_LowestAsk, 
            T.HighestBid AS CryptoCoinValue_HighestBid, 
            T.Time AS CryptoCoinValue_Time, 
            True AS _from0
        FROM CtbContext.CoinValues AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CryptoExchange.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CryptoExchange
        [CodeFirstDatabaseSchema.CryptoExchange](T1.CryptoExchange_Id, T1.CryptoExchange_Name, T1.CryptoExchange_Url, T1.CryptoExchange_TickerUrl, T1.CryptoExchange_BuyFees, T1.CryptoExchange_SellFees, T1.CryptoExchange_LastUpdate, T1.CryptoExchange_LastChange)
    FROM (
        SELECT 
            CAST(T.Id AS [Edm.Int32]) AS CryptoExchange_Id, 
            T.Name AS CryptoExchange_Name, 
            T.Url AS CryptoExchange_Url, 
            T.TickerUrl AS CryptoExchange_TickerUrl, 
            T.BuyFees AS CryptoExchange_BuyFees, 
            T.SellFees AS CryptoExchange_SellFees, 
            T.LastUpdate AS CryptoExchange_LastUpdate, 
            T.LastChange AS CryptoExchange_LastChange, 
            True AS _from0
        FROM CtbContext.Exchanges AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DepositFees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DepositFees
        [CodeFirstDatabaseSchema.DepositFees](T1.DepositFees_ExchangeId, T1.DepositFees_CoinId, T1.DepositFees_Value)
    FROM (
        SELECT 
            CAST(T.ExchangeId AS [Edm.Int32]) AS DepositFees_ExchangeId, 
            CAST(T.CoinId AS [Edm.Int32]) AS DepositFees_CoinId, 
            T.[Value] AS DepositFees_Value, 
            True AS _from0
        FROM CtbContext.DepositFees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.WithdrawalFees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WithdrawalFees
        [CodeFirstDatabaseSchema.WithdrawalFees](T1.WithdrawalFees_ExchangeId, T1.WithdrawalFees_CoinId, T1.WithdrawalFees_Value)
    FROM (
        SELECT 
            CAST(T.ExchangeId AS [Edm.Int32]) AS WithdrawalFees_ExchangeId, 
            CAST(T.CoinId AS [Edm.Int32]) AS WithdrawalFees_CoinId, 
            T.[Value] AS WithdrawalFees_Value, 
            True AS _from0
        FROM CtbContext.WithdrawalFees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TeleSubscription.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TeleSubscription
        [CodeFirstDatabaseSchema.TeleSubscription](T1.TeleSubscription_Id, T1.TeleSubscription_ExchangeId, T1.TeleSubscription_ChatId, T1.TeleSubscription_UserName, T1.TeleSubscription_Threshold, T1.TeleSubscription_LastSignificantPriceJson, T1.TeleSubscription_StartDate, T1.TeleSubscription_EndDate, T1.TeleSubscription_Expired)
    FROM (
        SELECT 
            T.Id AS TeleSubscription_Id, 
            CAST(T.ExchangeId AS [Edm.Int32]) AS TeleSubscription_ExchangeId, 
            T.ChatId AS TeleSubscription_ChatId, 
            T.UserName AS TeleSubscription_UserName, 
            T.Threshold AS TeleSubscription_Threshold, 
            T.LastSignificantPriceJson AS TeleSubscription_LastSignificantPriceJson, 
            T.StartDate AS TeleSubscription_StartDate, 
            T.EndDate AS TeleSubscription_EndDate, 
            T.Expired AS TeleSubscription_Expired, 
            True AS _from0
        FROM CtbContext.TeleSubscriptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CryptoExchangeCryptoCoinValue.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CryptoExchangeCryptoCoinValue
        [CodeFirstDatabaseSchema.CryptoExchangeCryptoCoinValue](T1.CryptoExchangeCryptoCoinValue_ExchangeId, T1.CryptoExchangeCryptoCoinValue_CoinValueId)
    FROM (
        SELECT 
            CAST(Key(T.CryptoExchange_LatestCoinValues_Source).Id AS [Edm.Int32]) AS CryptoExchangeCryptoCoinValue_ExchangeId, 
            Key(T.CryptoExchange_LatestCoinValues_Target).Id AS CryptoExchangeCryptoCoinValue_CoinValueId, 
            True AS _from0
        FROM CtbContext.CryptoExchange_LatestCoinValues AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TeleSubscriptionCryptoCoin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TeleSubscriptionCryptoCoin
        [CodeFirstDatabaseSchema.TeleSubscriptionCryptoCoin](T1.TeleSubscriptionCryptoCoin_SubscriptionId, T1.TeleSubscriptionCryptoCoin_CoinId)
    FROM (
        SELECT 
            Key(T.TeleSubscription_Coins_Source).Id AS TeleSubscriptionCryptoCoin_SubscriptionId, 
            CAST(Key(T.TeleSubscription_Coins_Target).Id AS [Edm.Int32]) AS TeleSubscriptionCryptoCoin_CoinId, 
            True AS _from0
        FROM CtbContext.TeleSubscription_Coins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CtbContext.Coins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Coins
        [CryptoTickerBot.Data.Persistence.CryptoCoin](T1.CryptoCoin_Id, T1.CryptoCoin_Symbol, T1.CryptoCoin_Name)
    FROM (
        SELECT 
            CAST(T.Id AS [CryptoTickerBot.Data.Persistence.CryptoCoinId]) AS CryptoCoin_Id, 
            T.Symbol AS CryptoCoin_Symbol, 
            T.Name AS CryptoCoin_Name, 
            True AS _from0
        FROM CodeFirstDatabase.CryptoCoin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CtbContext.CoinValues.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CoinValues
        [CryptoTickerBot.Data.Persistence.CryptoCoinValue](T1.CryptoCoinValue_Id, T1.CryptoCoinValue_CoinId, T1.CryptoCoinValue_ExchangeId, T1.CryptoCoinValue_LowestAsk, T1.CryptoCoinValue_HighestBid, T1.CryptoCoinValue_Time)
    FROM (
        SELECT 
            T.Id AS CryptoCoinValue_Id, 
            CAST(T.CoinId AS [CryptoTickerBot.Data.Persistence.CryptoCoinId]) AS CryptoCoinValue_CoinId, 
            CAST(T.ExchangeId AS [CryptoTickerBot.Data.Persistence.CryptoExchangeId]) AS CryptoCoinValue_ExchangeId, 
            T.LowestAsk AS CryptoCoinValue_LowestAsk, 
            T.HighestBid AS CryptoCoinValue_HighestBid, 
            T.Time AS CryptoCoinValue_Time, 
            True AS _from0
        FROM CodeFirstDatabase.CryptoCoinValue AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CtbContext.Exchanges.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Exchanges
        [CryptoTickerBot.Data.Persistence.CryptoExchange](T1.CryptoExchange_Id, T1.CryptoExchange_Name, T1.CryptoExchange_Url, T1.CryptoExchange_TickerUrl, T1.CryptoExchange_BuyFees, T1.CryptoExchange_SellFees, T1.CryptoExchange_LastUpdate, T1.CryptoExchange_LastChange)
    FROM (
        SELECT 
            CAST(T.Id AS [CryptoTickerBot.Data.Persistence.CryptoExchangeId]) AS CryptoExchange_Id, 
            T.Name AS CryptoExchange_Name, 
            T.Url AS CryptoExchange_Url, 
            T.TickerUrl AS CryptoExchange_TickerUrl, 
            T.BuyFees AS CryptoExchange_BuyFees, 
            T.SellFees AS CryptoExchange_SellFees, 
            T.LastUpdate AS CryptoExchange_LastUpdate, 
            T.LastChange AS CryptoExchange_LastChange, 
            True AS _from0
        FROM CodeFirstDatabase.CryptoExchange AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CtbContext.DepositFees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DepositFees
        [CryptoTickerBot.Data.Persistence.DepositFees](T1.DepositFees_ExchangeId, T1.DepositFees_CoinId, T1.DepositFees_Value)
    FROM (
        SELECT 
            CAST(T.ExchangeId AS [CryptoTickerBot.Data.Persistence.CryptoExchangeId]) AS DepositFees_ExchangeId, 
            CAST(T.CoinId AS [CryptoTickerBot.Data.Persistence.CryptoCoinId]) AS DepositFees_CoinId, 
            T.[Value] AS DepositFees_Value, 
            True AS _from0
        FROM CodeFirstDatabase.DepositFees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CtbContext.WithdrawalFees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing WithdrawalFees
        [CryptoTickerBot.Data.Persistence.WithdrawalFees](T1.WithdrawalFees_ExchangeId, T1.WithdrawalFees_CoinId, T1.WithdrawalFees_Value)
    FROM (
        SELECT 
            CAST(T.ExchangeId AS [CryptoTickerBot.Data.Persistence.CryptoExchangeId]) AS WithdrawalFees_ExchangeId, 
            CAST(T.CoinId AS [CryptoTickerBot.Data.Persistence.CryptoCoinId]) AS WithdrawalFees_CoinId, 
            T.[Value] AS WithdrawalFees_Value, 
            True AS _from0
        FROM CodeFirstDatabase.WithdrawalFees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CtbContext.TeleSubscriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TeleSubscriptions
        [CryptoTickerBot.Data.Persistence.TeleSubscription](T1.TeleSubscription_Id, T1.TeleSubscription_ExchangeId, T1.TeleSubscription_ChatId, T1.TeleSubscription_UserName, T1.TeleSubscription_Threshold, T1.TeleSubscription_LastSignificantPriceJson, T1.TeleSubscription_StartDate, T1.TeleSubscription_EndDate, T1.TeleSubscription_Expired)
    FROM (
        SELECT 
            T.Id AS TeleSubscription_Id, 
            CAST(T.ExchangeId AS [CryptoTickerBot.Data.Persistence.CryptoExchangeId]) AS TeleSubscription_ExchangeId, 
            T.ChatId AS TeleSubscription_ChatId, 
            T.UserName AS TeleSubscription_UserName, 
            T.Threshold AS TeleSubscription_Threshold, 
            T.LastSignificantPriceJson AS TeleSubscription_LastSignificantPriceJson, 
            T.StartDate AS TeleSubscription_StartDate, 
            T.EndDate AS TeleSubscription_EndDate, 
            T.Expired AS TeleSubscription_Expired, 
            True AS _from0
        FROM CodeFirstDatabase.TeleSubscription AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CtbContext.CryptoExchange_LatestCoinValues.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CryptoExchange_LatestCoinValues
        [CryptoTickerBot.Data.Persistence.CryptoExchange_LatestCoinValues](T3.[CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Source], T3.[CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Target])
    FROM (
        SELECT -- Constructing CryptoExchange_LatestCoinValues_Source
            CreateRef(CtbContext.Exchanges, row(T2.[CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Source.Id]), [CryptoTickerBot.Data.Persistence.CryptoExchange]) AS [CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Source], 
            T2.[CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Target]
        FROM (
            SELECT -- Constructing CryptoExchange_LatestCoinValues_Target
                T1.[CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Source.Id], 
                CreateRef(CtbContext.CoinValues, row(T1.[CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Target.Id]), [CryptoTickerBot.Data.Persistence.CryptoCoinValue]) AS [CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Target]
            FROM (
                SELECT 
                    CAST(T.ExchangeId AS [CryptoTickerBot.Data.Persistence.CryptoExchangeId]) AS [CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Source.Id], 
                    T.CoinValueId AS [CryptoExchange_LatestCoinValues.CryptoExchange_LatestCoinValues_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.CryptoExchangeCryptoCoinValue AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CtbContext.TeleSubscription_Coins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TeleSubscription_Coins
        [CryptoTickerBot.Data.Persistence.TeleSubscription_Coins](T3.[TeleSubscription_Coins.TeleSubscription_Coins_Source], T3.[TeleSubscription_Coins.TeleSubscription_Coins_Target])
    FROM (
        SELECT -- Constructing TeleSubscription_Coins_Source
            CreateRef(CtbContext.TeleSubscriptions, row(T2.[TeleSubscription_Coins.TeleSubscription_Coins_Source.Id]), [CryptoTickerBot.Data.Persistence.TeleSubscription]) AS [TeleSubscription_Coins.TeleSubscription_Coins_Source], 
            T2.[TeleSubscription_Coins.TeleSubscription_Coins_Target]
        FROM (
            SELECT -- Constructing TeleSubscription_Coins_Target
                T1.[TeleSubscription_Coins.TeleSubscription_Coins_Source.Id], 
                CreateRef(CtbContext.Coins, row(T1.[TeleSubscription_Coins.TeleSubscription_Coins_Target.Id]), [CryptoTickerBot.Data.Persistence.CryptoCoin]) AS [TeleSubscription_Coins.TeleSubscription_Coins_Target]
            FROM (
                SELECT 
                    T.SubscriptionId AS [TeleSubscription_Coins.TeleSubscription_Coins_Source.Id], 
                    CAST(T.CoinId AS [CryptoTickerBot.Data.Persistence.CryptoCoinId]) AS [TeleSubscription_Coins.TeleSubscription_Coins_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.TeleSubscriptionCryptoCoin AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TeleBotUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TeleBotUser
        [CodeFirstDatabaseSchema.TeleBotUser](T1.TeleBotUser_Id, T1.TeleBotUser_Role, T1.TeleBotUser_UserName, T1.TeleBotUser_FirstName, T1.TeleBotUser_LastName, T1.TeleBotUser_Created)
    FROM (
        SELECT 
            T.Id AS TeleBotUser_Id, 
            CAST(T.Role AS [Edm.Int32]) AS TeleBotUser_Role, 
            T.UserName AS TeleBotUser_UserName, 
            T.FirstName AS TeleBotUser_FirstName, 
            T.LastName AS TeleBotUser_LastName, 
            T.Created AS TeleBotUser_Created, 
            True AS _from0
        FROM CtbContext.TeleBotUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CtbContext.TeleBotUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TeleBotUsers
        [CryptoTickerBot.Data.Persistence.TeleBotUser](T1.TeleBotUser_Id, T1.TeleBotUser_Role, T1.TeleBotUser_UserName, T1.TeleBotUser_FirstName, T1.TeleBotUser_LastName, T1.TeleBotUser_Created)
    FROM (
        SELECT 
            T.Id AS TeleBotUser_Id, 
            CAST(T.Role AS [CryptoTickerBot.Data.Persistence.UserRole]) AS TeleBotUser_Role, 
            T.UserName AS TeleBotUser_UserName, 
            T.FirstName AS TeleBotUser_FirstName, 
            T.LastName AS TeleBotUser_LastName, 
            T.Created AS TeleBotUser_Created, 
            True AS _from0
        FROM CodeFirstDatabase.TeleBotUser AS T
    ) AS T1");
        }
    }
}
